{"version":3,"file":"Messenger-HTk7HgP5.js","sources":["../../../resources/js/Components/organism/ChatUser.jsx","../../../resources/js/Components/organism/MessageBox.jsx","../../../resources/js/Components/organism/Message.jsx","../../../resources/js/pusher/pusher.js","../../../resources/js/Pages/Chat/Messenger.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Avatar, Divider, List, Skeleton, Badge } from \"antd\";\nimport axios from \"axios\";\nimport { Link } from \"@inertiajs/react\";\n\nconst ChatUser = ({ user }) => {\n    const [total, setTotal] = useState(100);\n    const [loading, setLoading] = useState(false);\n    const [nextPageUrl, setNextPageUrl] = useState(\"/chat-users\");\n    const [data, setData] = useState([]);\n    const [page, setPage] = useState(0);\n    const [hasMore, setHasMore] = useState(true);\n    const getUsers = () => {\n        if (loading) {\n            return;\n        }\n        setLoading(true);\n        setPage(page + 1);\n        axios\n            .get(`/chat-users?page=${page}`)\n            .then((res) => {\n                setTotal(res.data.total);\n                setTotal(res.data.total);\n                if (res.data.last_page <= page) {\n                    setHasMore(false);\n                }\n                setData([...data, ...res.data.data]);\n                setLoading(false);\n            })\n            .catch((error) => {\n                setLoading(false);\n            });\n    };\n    const goto = () => {};\n    useEffect(() => {\n        getUsers();\n    }, []);\n    return (\n        <div\n            id=\"scrollableDiv\"\n            style={{\n                height: 630,\n                overflow: \"auto\",\n                padding: \"0px 0px\",\n            }}\n        >\n            <InfiniteScroll\n                dataLength={data.length}\n                next={getUsers}\n                hasMore={hasMore}\n                loader={data.length > 0 ? null : (\n                    <Skeleton\n                        avatar\n                        paragraph={{\n                            rows: 1,\n                        }}\n                        active\n                    />\n                )}\n                endMessage={<Divider plain>It is all, nothing more ü§ê</Divider>}\n                scrollableTarget=\"scrollableDiv\"\n            >\n                {data && (\n                    <List\n                        dataSource={data}\n                        renderItem={(item, index) => (\n                            <Link href={route(\"chat.user\", item.id)}>\n                                <List.Item\n                                    style={{ padding: \"10px\", gap: \"0px\" }}\n                                    className={\n                                        user?.id == item.id ? \"selected\" : \"\"\n                                    }\n                                    key={index}\n                                    onClick={goto}\n                                >\n                                    <List.Item.Meta\n                                        avatar={\n                                            <Avatar\n                                                src={\n                                                    \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRZyeylHD5tbJBruH48HgPdoKpmFsNJfBKXjhifVPO3gA&s\"\n                                                }\n                                            />\n                                        }\n                                        title={item?.name}\n                                        description={\n                                            <div className=\"mt-1 flex items-center gap-x-1.5 text-sm\">\n                                                <div className=\"flex-none rounded-full bg-emerald-500/20 p-1\">\n                                                <div className=\"h-1.5 w-1.5 rounded-full bg-emerald-500\" />\n                                                </div>\n                                                <p className=\"text-xs leading-5 text-gray-500\">Online</p>\n                                            </div>\n                                        }\n                                    />\n                                    {/* <Badge count={Math.floor(Math.random() * 5)} /> */}\n                                </List.Item>\n                            </Link>\n                        )}\n                    />\n                )}\n            </InfiniteScroll>\n        </div>\n    );\n};\n\nexport default ChatUser;\n","import React, { useState } from \"react\";\nimport { Flex, Input } from \"antd\";\nimport axios from \"axios\";\nimport TextInput from \"../TextInput\";\nconst { TextArea } = Input;\nconst MessageBox = ({ selected, setMessages }) => {\n    const [message, setMessage] = useState(\"\");\n    const handleKeyPress = (e) => {\n        //\n        if (e.key === \"Enter\" || e.which === 13) {\n            message.trim();\n            axios\n                .post(\"/send/message\", {\n                    message: message,\n                    receiver_id: selected,\n                })\n                .then((res) => {\n                    setMessages((prevItems) => [\n                        ...prevItems,\n                        res.data.message,\n                    ]);\n                })\n                .catch((error) => {\n                    console.log(error?.response?.data?.message);\n                });\n            setMessage(\"\");\n        }\n    };\n    return (\n        <div>\n            <TextInput\n            className=\"w-full\"\n                disabled={selected ? false : true}\n                placeholder=\"Type your message and hit enter....\"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                onKeyDown={handleKeyPress}\n            />\n        </div>\n    );\n};\n\nexport default MessageBox;\n","import React from \"react\";\n\nconst Message = ({ align, message, textAlign, datetime }) => {\n\n    const date = new Date(datetime);\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const amOrPm = hours >= 12 ? 'PM' : 'AM';\n    const formattedHours = hours % 12 || 12;\n    const formattedMinutes = minutes < 10 ? '0' + minutes : minutes;\n\n    const formattedTime = `${formattedHours}:${formattedMinutes} ${amOrPm}`;\n\n    return (\n        <div className={`flex ${align}`}>\n            <div className={`${message} ${textAlign}`  }>\n                {message}\n                <br />\n                <p className=\"date text-gray-500 text-xs\">{ formattedTime }</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Message;\n","import Pusher from \"pusher-js\";\nconst PUSHER_KEY = import.meta.env.VITE_PUSHER_APP_KEY;\nconst PUSHER_CLUSTURE = import.meta.env.VITE_PUSHER_APP_CLUSTER;\nconst pusher = new Pusher(PUSHER_KEY, {\n    cluster: PUSHER_CLUSTURE,\n    encrypted: true,\n});\n\nexport const subscribeToChannel = (channelName, eventName, callback) => {\n    const channel = pusher.subscribe(channelName);\n    channel.bind(eventName, callback);\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Input, Avatar, Empty, message } from \"antd\";\nimport {\n    MenuUnfoldOutlined,\n    AudioOutlined,\n    InfoCircleOutlined,\n} from \"@ant-design/icons\";\nimport \"./Messenger.css\";\nimport AuthenticatedLayout from \"@/Layouts/AuthenticatedLayout\";\nimport { Head } from \"@inertiajs/react\";\nimport ChatUser from \"@/Components/organism/ChatUser\";\nimport MessageBox from \"@/Components/organism/MessageBox\";\nimport Message from \"@/Components/organism/Message\";\nimport { subscribeToChannel } from \"@/pusher/pusher\";\nconst { Search } = Input;\n\nconst Messenger = ({ auth, mustVerifyEmail, status, user, chats }) => {\n    const onSearch = (e) => {\n        // console.log(e.target.value);\n        // console.log(appName);\n    };\n    const containerRef = useRef(null);\n    const [messages, setMessages] = useState([]);\n\n    // console.log(messages);\n    // console.log(auth, \"test\");\n    containerRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    useEffect(() => {\n        setMessages(chats);\n        window.Echo.private(`chat.${auth.user.id}`).listen(\n            \"MessageSent\",\n            (event) => {\n                containerRef.current.scrollTop = 0;\n                console.log(event.message);\n                setMessages((prevItems) => [...prevItems, event.message]);\n            }\n        );\n        //\n    }, []);\n\n    useEffect(() => {\n        containerRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }, [messages]);\n\n    return (\n        <AuthenticatedLayout user={auth.user}>\n            <Head title=\"Messenger\" />\n            <div className=\"chatContainer\">\n                <div className=\"chatUserList\">\n                    {/* <h4>Users</h4> */}\n                    <Input\n                        placeholder=\"Search User\"\n                        allowClear\n                        onChange={onSearch}\n                    />\n                    <ChatUser user={user} />\n                </div>\n\n                <div className=\"chatBody\">\n                    <div className=\"chatHeader\">\n                        <div className=\"chat-title\">\n                            {user ? (\n                                <>\n                                    <Avatar\n                                        src={\n                                            \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRZyeylHD5tbJBruH48HgPdoKpmFsNJfBKXjhifVPO3gA&s\"\n                                        }\n                                    />\n                                    {user?.name}\n                                </>\n                            ) : (\n                                <>\n                                    <MenuUnfoldOutlined />\n                                    Messages\n                                </>\n                            )}\n                        </div>\n                        <InfoCircleOutlined />\n                    </div>\n\n                    <div className=\"messages\">\n                        {user ? (\n                            messages?.map((item) => {\n                                return (\n                                    <Message\n                                        key={item?.id}\n                                        align={\n                                            item?.from == auth?.user?.id\n                                                ? \"justify-end\"\n                                                : \"justify-start\"\n                                        }\n                                        message={item?.message}\n                                        textAlign={\n                                            item?.from == auth?.user?.id\n                                                ? \"text-right\"\n                                                : \"text-left\"\n                                        }\n                                        datetime={ item?.created_at }\n                                    ></Message>\n                                );\n                            })\n                        ) : (\n                            <div className=\"empty\">\n                                <Empty\n                                    image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"\n                                    imageStyle={{ height: 100 }}\n                                    description={\n                                        <span>\n                                            No user <a href=\"#API\">selected</a>\n                                        </span>\n                                    }\n                                >\n                                    {/* <Button type=\"primary\">Create Now</Button> */}\n                                </Empty>\n                            </div>\n                        )}\n                        <div ref={containerRef}></div>\n                    </div>\n                    <div className=\"messageBox\">\n                        <MessageBox\n                            setMessages={setMessages}\n                            selected={user?.id}\n                        />\n                    </div>\n                </div>\n            </div>\n        </AuthenticatedLayout>\n    );\n};\n\nexport default Messenger;\n"],"names":["ChatUser","user","total","setTotal","useState","loading","setLoading","data","setData","page","setPage","hasMore","setHasMore","getUsers","axios","res","error","goto","useEffect","jsx","InfiniteScroll","Skeleton","Divider","List","item","index","Link","Avatar","jsxs","MessageBox","selected","setMessages","message","setMessage","handleKeyPress","e","prevItems","_b","_a","TextInput","Message","align","textAlign","datetime","date","hours","minutes","amOrPm","formattedHours","formattedMinutes","formattedTime","PUSHER_KEY","PUSHER_CLUSTURE","Pusher","Messenger","auth","mustVerifyEmail","status","chats","onSearch","containerRef","useRef","messages","event","AuthenticatedLayout","Head","Input","Fragment","MenuUnfoldOutlined","InfoCircleOutlined","Empty"],"mappings":"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"}